# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique # read-only (managed by Graphcool)
  firstName: String
  lastName: String
  email: String! @isUnique
  password: String!
  age: Int
  bikeType: String
  bikeBrand: String
  bikeColor: String
  addressOne: String
  addressTwo: String
  province: String
  country: String
  postalCode: String
  profilePhoto: File @relation(name: "UserFile")
  reviews: [Review!]! @relation(name: "UserReview")
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)
}

type Review @model {
  id: ID! @isUnique
  review: String!
  rating: Int
  reviewer: User! @relation(name: "UserReview")
  photos: [File!]
  locker: Locker! @relation(name: "lockerReviews")

  # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
  author: User! @relation(name: "UserPosts")
}

type File @model {
  id: ID! @isUnique
  contentType: String
  name: String
  secret: String
  size: Int
  url: String
  review: [Review!]! @relation(name: "ReviewFiles")
  user: User! @relation(name: "UserFile")
}

type Review @model {
  id: ID! @isUnique
  createdAt: DateTime!
  review: String!
  rating: Int
  reviewer: User! @relation(name: "UserReview")
  photos: [File!]! @relation(name: "ReviewFiles")
  locker: Locker! @relation(name: "LockerReviews")
}

type Locker @model {
  id: ID! @isUnique
  latitude: Float!
  longitude: Float!
  reviews: [Review!]! @relation(name: "LockerReviews")
  address: String!
}
